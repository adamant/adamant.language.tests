public fn main()
{
    let test: mut Test = new Test();
    let borrowed: mut Test = capture_borrow(mut test);
    borrow(mut test); // ERROR can't borrow while already borrowed (can only do so once)
    borrow(mut borrowed);
}

public mut class Test
{
}

public fn borrow(test: mut Test)
{
}

public fn capture_borrow(test: mut Test) -> mut Test ~> test
{
    return mut test;
}
