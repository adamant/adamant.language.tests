public fn main()
{
    let book: mut Book$owned = new Book();
    {
        let borrow: Book = immutable_borrow_out(book);
        mutable_borrow(mut book); // ERROR can't borrow mutably while already borrowed immutably
        immutable_borrow(borrow);
    }
    {
        let borrow: Book = immutable_borrow_out(book);
        immutable_borrow(book);
        immutable_borrow(borrow);
    }
    {
        let borrow: mut Book = mutable_borrow_out(mut book);
        mutable_borrow(mut book); // ERROR can't borrow mutably while already borrowed mutably (can only do so once)
        mutable_borrow(mut borrow);
    }
    {
        let borrow: mut Book = mutable_borrow_out(mut book);
        immutable_borrow(mut book); // ERROR can't borrow immutably while already borrowed mutably
        mutable_borrow(mut borrow);
    }
    double_mutable_borrow(mut book, mut book); // ERROR can't borrow mutably multiple times
}

public mut class Book
{
}

public fn bad_produce() -> Book
{
    return new Book(); // ERROR
}

public fn immutable_borrow(book: Book)
{
}

public fn double_mutable_borrow(b1: mut Book, b2: mut Book)
{
}

public fn mutable_borrow(book: mut Book)
{
}

public fn immutable_borrow_out(book: Book) $book -> Book
{
    return book;
}

public fn mutable_borrow_out(book: mut Book) $book -> mut Book
{
    return mut book;
}
