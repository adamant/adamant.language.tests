public fn main()
{
    let book: owned Book = produce();
    // Recover mutability from ownership here
    let book: owned mut Book = take_give(move book);
    immutable_borrow(book);
    double_immutable_borrow(book, book);
    mutable_borrow(mut book);

    let borrowed_imm: Book = immutable_borrow_out(book);
    let borrowed_mut: mut Book = mutable_borrow_out(mut book);

    let immutable: owned Book = new Book();
    take_recover_mutable(move immutable);
}

public mut class Book
{
}

public fn produce() -> owned Book
{
    let book: Book = new Book();
    return book;
}

public fn take_give(book: owned Book) -> owned Book
{
    return book;
}

public fn immutable_borrow(book: Book)
{
}

public fn double_immutable_borrow(b1: Book, b2: Book)
{
}

public fn mutable_borrow(book: mut Book)
{
}

public fn immutable_borrow_out(book: Book) -> Book ~> book
{
    return book;
}

public fn mutable_borrow_out(book: mut Book) -> mut Book ~> book
{
    return mut book;
}

public fn take_recover_mutable(book: owned mut Book)
{
}
