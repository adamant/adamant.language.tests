public fn main()
{
    let x: mut Test$owned = new Test();
    let y: mut Test = mut x; // reborrow
    immutable_borrow(x); // ERROR can't use `x` because it is borrowed mutably by `y`
    mutable_borrow(mut y);

    let z: mut Test = mut y; // reborrow again
    mutable_borrow(mut y); // EORROR borrowed by `z`
    mutable_borrow(mut z);
    mutable_borrow(mut y); // `z` ends so we can use `y` again
}

public mut class Test
{
}

public fn immutable_borrow(t: Test)
{
}

public fn mutable_borrow(t: mut Test)
{
}
